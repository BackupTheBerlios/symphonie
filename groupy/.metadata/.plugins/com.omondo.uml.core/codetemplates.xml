<?xml version="1.0" encoding="UTF-8"?>
<templates><property-templates description="Collection generation template" enabled="true" name="java.util.Collection"><accessor-template body-pattern="{\n\treturn ${attribute_name};\n}\n" description="Collection getter template" enabled="false" name="getter" name-pattern="${attribute_type} get${property_name}()" primary="false"/><accessor-template body-pattern="{\n\t${attribute_name} = value;\n}\n" description="Collection setter template" enabled="true" name="setter" name-pattern="void set${property_name}(${attribute_type} value)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.iterator();\n}\n" category="read-only" description="Collection iterator() delegate method" enabled="true" imports="java.util.Iterator" name="iterator" name-pattern="Iterator ${property_name}Iterator()" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.add(element);\n}\n" description="Collection add() delegate method template" enabled="true" name="add" name-pattern="boolean add${property_name}(${element_type} element)" primary="true"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.remove(element);\n}\n" description="Collection remove() delegate method template" enabled="true" name="remove" name-pattern="boolean remove${property_name}(${element_type} element)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.isEmpty();\n}\n" category="read-only" description="Collection isEmpty() delegate method template" enabled="true" name="isEmpty" name-pattern="boolean is${property_name}Empty()" primary="false"/><accessor-template body-pattern="{\n\t${attribute_name}.clear();\n}\n" description="Collection clear() delegate method template" enabled="true" name="clear" name-pattern="void clear${property_name}()" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.contains(element);\n}\n" category="read-only" description="Collection contains() delegate method template" enabled="true" name="contains" name-pattern="boolean contains${property_name}(${element_type} element)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.containsAll(elements);\n}\n" category="read-only" description="Collection containsAll() delegate method" enabled="true" imports="java.util.Collection" name="containsAll" name-pattern="boolean containsAll${property_name}(Collection elements)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.size();\n}\n" category="read-only" description="Collection size() delegate method template" enabled="true" name="size" name-pattern="int ${property_name}Size()" primary="false"/><accessor-template body-pattern="{\n\treturn (${element_type}[]) ${attribute_name}.toArray(new ${element_type}[${attribute_name}.size()]);\n}\n" category="read-only" description="Collection toArray() delegate method" enabled="true" name="toArray" name-pattern="${element_type}[] ${property_name}ToArray()" primary="false"/></property-templates><property-templates description="Map generation template" enabled="true" name="java.util.Map"><accessor-template body-pattern="{\n\treturn ${attribute_name};\n}\n" description="Map getter template" enabled="true" name="getter" name-pattern="${attribute_type} get${property_name}()" primary="false"/><accessor-template body-pattern="{\n\t${attribute_name} = value;\n}\n" description="Map setter template" enabled="true" name="setter" name-pattern="void set${property_name}(${attribute_type} value)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.keySet();\n}\n" category="read-only" description="Map keySet() delegate method" enabled="true" imports="java.util.Set" name="keySet" name-pattern="Set ${property_name}KeySet()" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.values();\n}\n" category="read-only" description="Map values() delegate method" enabled="true" imports="java.util.Collection" name="values" name-pattern="Collection ${property_name}Values()" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.containsKey(key);\n}\n" category="read-only" description="Map containsKey() delegate method" enabled="true" name="containsKey" name-pattern="boolean ${property_name}ContainsKey(${qualifier_key_type} key)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.containsValue(value);\n}\n" category="read-only" description="CodeGeneration.map.containsValue.template.description" enabled="true" name="containsValue" name-pattern="boolean ${property_name}ContainsValue(${qualifier_value_type} value)" primary="false"/><accessor-template body-pattern="{\n\treturn (${qualifier_value_type})${attribute_name}.get(key);\n}\n" category="read-only" description="Map get() delegate method" enabled="true" name="get" name-pattern="${qualifier_value_type} get${property_name}(${qualifier_key_type} key)" primary="true"/><accessor-template body-pattern="{\n\treturn (${qualifier_value_type})${attribute_name}.put(key, value);\n}\n" description="Map put() delegate method" enabled="true" name="put" name-pattern="${qualifier_value_type} put${property_name}(${qualifier_key_type} key, ${qualifier_value_type} value)" primary="false"/><accessor-template body-pattern="{\n\treturn (${qualifier_value_type}) ${attribute_name}.remove(key);\n}\n" description="Map remove() delegate method" enabled="true" name="remove" name-pattern="${qualifier_value_type} remove${property_name}(${qualifier_key_type} key)" primary="false"/><accessor-template body-pattern="{\n\t${attribute_name}.clear();\n}\n" description="Map clear() delegate method" enabled="true" name="clear" name-pattern="void clear${property_name}()" primary="false"/></property-templates><property-templates description="List generation template" enabled="true" name="java.util.List"><accessor-template body-pattern="{\n\treturn ${attribute_name};\n}\n" category="read-only" description="List getter template" enabled="true" name="getter" name-pattern="${attribute_type} get${property_name}()" primary="false"/><accessor-template body-pattern="{\n\t${attribute_name} = value;\n}\n" description="List setter template" enabled="true" name="setter" name-pattern="void set${property_name}(${attribute_type} value)" primary="false"/><accessor-template body-pattern="{\n\treturn (${element_type}) ${attribute_name}.get(i);\n}\n" category="read-only" description="List get() delegate method" enabled="true" name="get" name-pattern="${element_type} get${property_name}(int i)" primary="true"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.iterator();\n}\n" category="read-only" description="List iterator() delegate method" enabled="true" imports="java.util.Iterator" name="iterator" name-pattern="Iterator ${property_name}Iterator()" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.add(element);\n}\n" description="List add() delegate method" enabled="true" name="add" name-pattern="boolean add${property_name}(${element_type} element)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.remove(element);\n}\n" description="List remove() delegate method" enabled="true" name="remove" name-pattern="boolean remove${property_name}(${element_type} element)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.isEmpty();\n}\n" category="read-only" description="List isEmpty() delegate method" enabled="true" name="isEmpty" name-pattern="boolean is${property_name}Empty()" primary="false"/><accessor-template body-pattern="{\n\t${attribute_name}.clear();\n}\n" description="List clear() delegate method" enabled="true" name="clear" name-pattern="void clear${property_name}()" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.contains(element);\n}\n" category="read-only" description="List contains() delegate method" enabled="true" name="contains" name-pattern="boolean contains${property_name}(${element_type} element)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.containsAll(elements);\n}\n" category="read-only" description="List containsAll() delegate method" enabled="true" imports="java.util.Collection" name="containsAll" name-pattern="boolean containsAll${property_name}(Collection elements)" primary="false"/><accessor-template body-pattern="{\n\treturn ${attribute_name}.size();\n}\n" category="read-only" description="List size() delegate method" enabled="true" name="size" name-pattern="int ${property_name}Size()" primary="false"/><accessor-template body-pattern="{\n\treturn (${element_type}[]) ${attribute_name}.toArray(new ${element_type}[${attribute_name}.size()]);\n}\n" category="read-only" description="List toArray() delegate method" enabled="true" name="toArray" name-pattern="${element_type}[] ${property_name}ToArray()" primary="false"/></property-templates></templates>